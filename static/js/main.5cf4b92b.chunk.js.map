{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","onClick","toggleMode","htmlFor","mode","TextForm","str","useState","text","setText","headStyle","color","textareaStyle","backgroundColor","border","summaryStyle","style","copy","alert","rows","placeholder","value","onChange","event","target","length","trim","split","count","newStr","replace","i","countLetters","countCharacters","toUpperCase","toLowerCase","finalStr","item","newItem","charAt","slice","newText","italics","document","getElementById","innerHTML","strike","bold","App","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5cf4b92b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-dark bg-dark`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"form-check form-switch\">\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label text-light\" htmlFor=\"flexSwitchCheckDefault\">{props.mode=== \"dark\"?\"Light mode\": \"Dark mode\"}</label>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./TextForm.css\";\r\nimport copy from \"copy-to-clipboard\";\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  //FUNCTION THAT ALLOWS USER TO WRITE IN TEXTAREA\r\n  function handleChange(event) {\r\n    setText(event.target.value);\r\n  }\r\n  // FUNCTIONS TO COUNT WORDS, CHARACTERS AND LETTERS\r\n  function countWords(str) {\r\n    if (text.length === 0) {\r\n      return 0;\r\n    } else {\r\n      return str.trim().split(/\\s+/).length;\r\n    }\r\n  }\r\n  function countLetters(str) {\r\n    let count = 0;\r\n    let newStr = str.replace(/[^a-zA-Z ]/g, \" \");\r\n    for (let i = 0; i < newStr.length; i++) {\r\n      if (newStr[i] === \" \") {\r\n        count = count + 0;\r\n      } else {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n  function countCharacters(str) {\r\n    let count = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      if (str[i] === \" \") {\r\n        count = count + 0;\r\n      } else {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  //BUTTON FUNCTIONS\r\n  function handleCopyClick(){\r\n    copy(text);\r\n    alert(\"Text copied!\")\r\n  }\r\n  function handleClearClick(){\r\n    setText(\"\")\r\n  }\r\n  function handleUpClick() {\r\n    setText(text.toUpperCase());\r\n  }\r\n  function handleLowClick() {\r\n    setText(text.toLowerCase());\r\n  }\r\n  function handleCapClick() {\r\n    let newStr = text.replace(/\\s+/g, \" \").trim().split(\" \");\r\n    let finalStr = \"\";\r\n    for (let i = 0; i < newStr.length; i++) {\r\n      let item = newStr[i];\r\n      let newItem = item.charAt(0).toUpperCase() + item.slice(1);\r\n      if (i === 0) {\r\n        finalStr += newItem;\r\n      } else {\r\n        finalStr += \" \" + newItem;\r\n      }\r\n    }\r\n    setText(finalStr);\r\n  }\r\n  function handleRemoveClick() {\r\n    let str = text.trim().split(/\\s+/);\r\n    let finalStr = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n      let item = str[i];\r\n      if (i === 0) {\r\n        finalStr += item;\r\n      } else {\r\n        finalStr += \" \" + item;\r\n      }\r\n    }\r\n    setText(finalStr);\r\n  }\r\n  function handleItalicClick(){\r\n    let newText=text.italics();\r\n    document.getElementById(\"test-container\").innerHTML=newText;\r\n  }\r\n  function handleStrikeClick(){\r\n    let newText=text.strike();\r\n    document.getElementById(\"test-container\").innerHTML=newText;\r\n  }\r\n  function handleBoldClick(){\r\n    let newText=text.bold();\r\n    document.getElementById(\"test-container\").innerHTML=newText;\r\n  }\r\n \r\n  \r\n  \r\n  //STATE CHANGES\r\n  const [text, setText] = useState(\"\");\r\n\r\n  // CSS\r\n  let headStyle={color: props.mode=== 'dark'?'white':'black'}\r\n  let textareaStyle= {backgroundColor: props.mode===\"dark\"? \"#4f4f4f\": \"white\", color:props.mode=== \"dark\"?\"white\": \"black\", border: \"1px solid #4f4f4f\"}\r\n  let summaryStyle= {backgroundColor: props.mode===\"dark\"? \"#3e4145\": \"white\", color:props.mode=== \"dark\"?\"white\": \"black\", border:props.mode===\"dark\"?\"1px solid #4f4f4f\": \"0px\" }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-3 my-5 container\">\r\n        {/* heading */}\r\n        <div className=\"self-container\">\r\n          <h1 className=\"self-header\" style={headStyle} >Enter your text in box:- </h1>\r\n          <div className=\"btn-container\">\r\n            <button type=\"button\" className=\"btn btn-success \" onClick={handleCopyClick}>\r\n              Copy\r\n            </button>\r\n            <button type=\"button\" className=\"btn btn-danger \" onClick={handleClearClick}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* TEXT AREA */}\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"input-area\"\r\n          rows=\"8\"\r\n          placeholder=\"Text here...\"\r\n          value={text}\r\n          onChange={handleChange}\r\n          style={textareaStyle}\r\n        ></textarea>\r\n        <div className=\"card\" style={{border:\"0.5px solid #323538\"}}>\r\n          <div className=\"card-body\" style={summaryStyle}>\r\n            <p className=\"card-text\">\r\n              Words : {countWords(text)} &nbsp;&nbsp; Letters :{\" \"}\r\n              {countLetters(text)} &nbsp;&nbsp; Characters :{\" \"}\r\n              {countCharacters(text)} &nbsp;&nbsp;\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* BUTTONS */}\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleLowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleCapClick}>\r\n          Capitalize every word\r\n        </button>\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleRemoveClick}>\r\n           Remove extra space\r\n        </button>\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleItalicClick}>\r\n           Convert to Italicize\r\n        </button>\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleStrikeClick}>\r\n           Strike-through Text\r\n        </button>\r\n        <button className=\"btn btn-primary my-4 mx-2\" onClick={handleBoldClick}>\r\n           Convert to Bolder\r\n        </button>\r\n        \r\n        \r\n\r\n\r\n\r\n        <div id=\"test-container\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  // State for dark mode\n  const [mode, setMode] = useState(\"light\");\n\n  function toggleMode() {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#323538\";\n    } else if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"Text Utility\" toggleMode={toggleMode} mode={mode}/>\n      <TextForm mode={mode} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}